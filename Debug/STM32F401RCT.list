
STM32F401RCT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000570  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08000704  08000704  00001704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080007c4  080007c4  000017cc  2**0
                  CONTENTS
  4 .ARM          00000000  080007c4  080007c4  000017cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007c4  080007cc  000017cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007c4  080007c4  000017c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080007c8  080007c8  000017c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000017cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007cc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007cc  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000ee5  00000000  00000000  000017fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003a7  00000000  00000000  000026e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000d0  00000000  00000000  00002a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00000cc4  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000006c0  00000000  00000000  0000381c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00003b5e  00000000  00000000  00003edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00007a3a  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 0000007c  00000000  00000000  00007a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001b0  00000000  00000000  00007afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00007cac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080006ec 	.word	0x080006ec

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080006ec 	.word	0x080006ec

080001d4 <GPIO_voidInit>:

#include "GPIO_Conf.h"
#include "GPIO_Interface.h"
#include "GPIO_Private.h"

void GPIO_voidInit(void) {
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0

	//I excluded the Debugging pins.
	for (GPIO_PINS_t pinNum = PINA0; pinNum < PIN_TOTAL; pinNum++) {
 80001da:	2300      	movs	r3, #0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	e01b      	b.n	8000218 <GPIO_voidInit+0x44>
		if (pinNum != PINA15 && pinNum != PINA14 && pinNum != PINA13
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	2b0f      	cmp	r3, #15
 80001e4:	d015      	beq.n	8000212 <GPIO_voidInit+0x3e>
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	2b0e      	cmp	r3, #14
 80001ea:	d012      	beq.n	8000212 <GPIO_voidInit+0x3e>
 80001ec:	79fb      	ldrb	r3, [r7, #7]
 80001ee:	2b0d      	cmp	r3, #13
 80001f0:	d00f      	beq.n	8000212 <GPIO_voidInit+0x3e>
				&& pinNum != PINB4 && pinNum != PINB3) {
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	2b14      	cmp	r3, #20
 80001f6:	d00c      	beq.n	8000212 <GPIO_voidInit+0x3e>
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	2b13      	cmp	r3, #19
 80001fc:	d009      	beq.n	8000212 <GPIO_voidInit+0x3e>
			GPIO_enPinConfig(pinNum, GPIO_pinStatusArray[pinNum]);
 80001fe:	79fb      	ldrb	r3, [r7, #7]
 8000200:	4909      	ldr	r1, [pc, #36]	@ (8000228 <GPIO_voidInit+0x54>)
 8000202:	79fa      	ldrb	r2, [r7, #7]
 8000204:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000208:	460b      	mov	r3, r1
 800020a:	4619      	mov	r1, r3
 800020c:	4610      	mov	r0, r2
 800020e:	f000 f80d 	bl	800022c <GPIO_enPinConfig>
	for (GPIO_PINS_t pinNum = PINA0; pinNum < PIN_TOTAL; pinNum++) {
 8000212:	79fb      	ldrb	r3, [r7, #7]
 8000214:	3301      	adds	r3, #1
 8000216:	71fb      	strb	r3, [r7, #7]
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	2b2f      	cmp	r3, #47	@ 0x2f
 800021c:	d9e0      	bls.n	80001e0 <GPIO_voidInit+0xc>
		}
	}
}
 800021e:	bf00      	nop
 8000220:	bf00      	nop
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	08000704 	.word	0x08000704

0800022c <GPIO_enPinConfig>:

ERROR_t GPIO_enPinConfig(GPIO_PINS_t copy_enPinNum,
		GPIO_PIN_MODE_t copy_enPinMode) {
 800022c:	b480      	push	{r7}
 800022e:	b085      	sub	sp, #20
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
	GPIO_Port_t local_enPort = copy_enPinNum / 16;
 8000238:	79fb      	ldrb	r3, [r7, #7]
 800023a:	091b      	lsrs	r3, r3, #4
 800023c:	73fb      	strb	r3, [r7, #15]
	GPIO_PINS_t local_enPin = copy_enPinNum % 16;
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f003 030f 	and.w	r3, r3, #15
 8000244:	73bb      	strb	r3, [r7, #14]

	ERROR_t local_enError = OK;
 8000246:	2301      	movs	r3, #1
 8000248:	737b      	strb	r3, [r7, #13]

	switch (local_enPort) {
 800024a:	7bfb      	ldrb	r3, [r7, #15]
 800024c:	2b02      	cmp	r3, #2
 800024e:	d067      	beq.n	8000320 <GPIO_enPinConfig+0xf4>
 8000250:	2b02      	cmp	r3, #2
 8000252:	f300 8095 	bgt.w	8000380 <GPIO_enPinConfig+0x154>
 8000256:	2b00      	cmp	r3, #0
 8000258:	d002      	beq.n	8000260 <GPIO_enPinConfig+0x34>
 800025a:	2b01      	cmp	r3, #1
 800025c:	d030      	beq.n	80002c0 <GPIO_enPinConfig+0x94>
		GPIOC->GPIO_PUPDR |= (copy_enPinMode.PUPDR << (local_enPin * 2));
		GPIOC->GPIO_OSPEEDR |= (copy_enPinMode.OSPEEDER << (local_enPin * 2));
		break;

	default:
		break;
 800025e:	e08f      	b.n	8000380 <GPIO_enPinConfig+0x154>
		GPIOA->GPIO_MODER |= (copy_enPinMode.MODER << (local_enPin * 2));
 8000260:	4b4b      	ldr	r3, [pc, #300]	@ (8000390 <GPIO_enPinConfig+0x164>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	783a      	ldrb	r2, [r7, #0]
 8000266:	4611      	mov	r1, r2
 8000268:	7bba      	ldrb	r2, [r7, #14]
 800026a:	0052      	lsls	r2, r2, #1
 800026c:	fa01 f202 	lsl.w	r2, r1, r2
 8000270:	4611      	mov	r1, r2
 8000272:	4a47      	ldr	r2, [pc, #284]	@ (8000390 <GPIO_enPinConfig+0x164>)
 8000274:	430b      	orrs	r3, r1
 8000276:	6013      	str	r3, [r2, #0]
		GPIOA->GPIO_OTYPER |= (copy_enPinMode.OTYPER << local_enPin);
 8000278:	4b45      	ldr	r3, [pc, #276]	@ (8000390 <GPIO_enPinConfig+0x164>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	787a      	ldrb	r2, [r7, #1]
 800027e:	4611      	mov	r1, r2
 8000280:	7bba      	ldrb	r2, [r7, #14]
 8000282:	fa01 f202 	lsl.w	r2, r1, r2
 8000286:	4611      	mov	r1, r2
 8000288:	4a41      	ldr	r2, [pc, #260]	@ (8000390 <GPIO_enPinConfig+0x164>)
 800028a:	430b      	orrs	r3, r1
 800028c:	6053      	str	r3, [r2, #4]
		GPIOA->GPIO_OSPEEDR |= (copy_enPinMode.OSPEEDER << (local_enPin * 2));
 800028e:	4b40      	ldr	r3, [pc, #256]	@ (8000390 <GPIO_enPinConfig+0x164>)
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	78ba      	ldrb	r2, [r7, #2]
 8000294:	4611      	mov	r1, r2
 8000296:	7bba      	ldrb	r2, [r7, #14]
 8000298:	0052      	lsls	r2, r2, #1
 800029a:	fa01 f202 	lsl.w	r2, r1, r2
 800029e:	4611      	mov	r1, r2
 80002a0:	4a3b      	ldr	r2, [pc, #236]	@ (8000390 <GPIO_enPinConfig+0x164>)
 80002a2:	430b      	orrs	r3, r1
 80002a4:	6093      	str	r3, [r2, #8]
		GPIOA->GPIO_PUPDR |= (copy_enPinMode.PUPDR << (local_enPin * 2));
 80002a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000390 <GPIO_enPinConfig+0x164>)
 80002a8:	68db      	ldr	r3, [r3, #12]
 80002aa:	78fa      	ldrb	r2, [r7, #3]
 80002ac:	4611      	mov	r1, r2
 80002ae:	7bba      	ldrb	r2, [r7, #14]
 80002b0:	0052      	lsls	r2, r2, #1
 80002b2:	fa01 f202 	lsl.w	r2, r1, r2
 80002b6:	4611      	mov	r1, r2
 80002b8:	4a35      	ldr	r2, [pc, #212]	@ (8000390 <GPIO_enPinConfig+0x164>)
 80002ba:	430b      	orrs	r3, r1
 80002bc:	60d3      	str	r3, [r2, #12]
		break;
 80002be:	e060      	b.n	8000382 <GPIO_enPinConfig+0x156>
		GPIOB->GPIO_MODER |= (copy_enPinMode.MODER << (local_enPin * 2));
 80002c0:	4b34      	ldr	r3, [pc, #208]	@ (8000394 <GPIO_enPinConfig+0x168>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	783a      	ldrb	r2, [r7, #0]
 80002c6:	4611      	mov	r1, r2
 80002c8:	7bba      	ldrb	r2, [r7, #14]
 80002ca:	0052      	lsls	r2, r2, #1
 80002cc:	fa01 f202 	lsl.w	r2, r1, r2
 80002d0:	4611      	mov	r1, r2
 80002d2:	4a30      	ldr	r2, [pc, #192]	@ (8000394 <GPIO_enPinConfig+0x168>)
 80002d4:	430b      	orrs	r3, r1
 80002d6:	6013      	str	r3, [r2, #0]
		GPIOB->GPIO_OTYPER |= (copy_enPinMode.OTYPER << local_enPin);
 80002d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000394 <GPIO_enPinConfig+0x168>)
 80002da:	685b      	ldr	r3, [r3, #4]
 80002dc:	787a      	ldrb	r2, [r7, #1]
 80002de:	4611      	mov	r1, r2
 80002e0:	7bba      	ldrb	r2, [r7, #14]
 80002e2:	fa01 f202 	lsl.w	r2, r1, r2
 80002e6:	4611      	mov	r1, r2
 80002e8:	4a2a      	ldr	r2, [pc, #168]	@ (8000394 <GPIO_enPinConfig+0x168>)
 80002ea:	430b      	orrs	r3, r1
 80002ec:	6053      	str	r3, [r2, #4]
		GPIOB->GPIO_PUPDR |= (copy_enPinMode.PUPDR << (local_enPin * 2));
 80002ee:	4b29      	ldr	r3, [pc, #164]	@ (8000394 <GPIO_enPinConfig+0x168>)
 80002f0:	68db      	ldr	r3, [r3, #12]
 80002f2:	78fa      	ldrb	r2, [r7, #3]
 80002f4:	4611      	mov	r1, r2
 80002f6:	7bba      	ldrb	r2, [r7, #14]
 80002f8:	0052      	lsls	r2, r2, #1
 80002fa:	fa01 f202 	lsl.w	r2, r1, r2
 80002fe:	4611      	mov	r1, r2
 8000300:	4a24      	ldr	r2, [pc, #144]	@ (8000394 <GPIO_enPinConfig+0x168>)
 8000302:	430b      	orrs	r3, r1
 8000304:	60d3      	str	r3, [r2, #12]
		GPIOB->GPIO_OSPEEDR |= (copy_enPinMode.OSPEEDER << (local_enPin * 2));
 8000306:	4b23      	ldr	r3, [pc, #140]	@ (8000394 <GPIO_enPinConfig+0x168>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	78ba      	ldrb	r2, [r7, #2]
 800030c:	4611      	mov	r1, r2
 800030e:	7bba      	ldrb	r2, [r7, #14]
 8000310:	0052      	lsls	r2, r2, #1
 8000312:	fa01 f202 	lsl.w	r2, r1, r2
 8000316:	4611      	mov	r1, r2
 8000318:	4a1e      	ldr	r2, [pc, #120]	@ (8000394 <GPIO_enPinConfig+0x168>)
 800031a:	430b      	orrs	r3, r1
 800031c:	6093      	str	r3, [r2, #8]
		break;
 800031e:	e030      	b.n	8000382 <GPIO_enPinConfig+0x156>
		GPIOC->GPIO_MODER |= (copy_enPinMode.MODER << (local_enPin * 2));
 8000320:	4b1d      	ldr	r3, [pc, #116]	@ (8000398 <GPIO_enPinConfig+0x16c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	783a      	ldrb	r2, [r7, #0]
 8000326:	4611      	mov	r1, r2
 8000328:	7bba      	ldrb	r2, [r7, #14]
 800032a:	0052      	lsls	r2, r2, #1
 800032c:	fa01 f202 	lsl.w	r2, r1, r2
 8000330:	4611      	mov	r1, r2
 8000332:	4a19      	ldr	r2, [pc, #100]	@ (8000398 <GPIO_enPinConfig+0x16c>)
 8000334:	430b      	orrs	r3, r1
 8000336:	6013      	str	r3, [r2, #0]
		GPIOC->GPIO_OTYPER |= (copy_enPinMode.OTYPER << local_enPin);
 8000338:	4b17      	ldr	r3, [pc, #92]	@ (8000398 <GPIO_enPinConfig+0x16c>)
 800033a:	685b      	ldr	r3, [r3, #4]
 800033c:	787a      	ldrb	r2, [r7, #1]
 800033e:	4611      	mov	r1, r2
 8000340:	7bba      	ldrb	r2, [r7, #14]
 8000342:	fa01 f202 	lsl.w	r2, r1, r2
 8000346:	4611      	mov	r1, r2
 8000348:	4a13      	ldr	r2, [pc, #76]	@ (8000398 <GPIO_enPinConfig+0x16c>)
 800034a:	430b      	orrs	r3, r1
 800034c:	6053      	str	r3, [r2, #4]
		GPIOC->GPIO_PUPDR |= (copy_enPinMode.PUPDR << (local_enPin * 2));
 800034e:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <GPIO_enPinConfig+0x16c>)
 8000350:	68db      	ldr	r3, [r3, #12]
 8000352:	78fa      	ldrb	r2, [r7, #3]
 8000354:	4611      	mov	r1, r2
 8000356:	7bba      	ldrb	r2, [r7, #14]
 8000358:	0052      	lsls	r2, r2, #1
 800035a:	fa01 f202 	lsl.w	r2, r1, r2
 800035e:	4611      	mov	r1, r2
 8000360:	4a0d      	ldr	r2, [pc, #52]	@ (8000398 <GPIO_enPinConfig+0x16c>)
 8000362:	430b      	orrs	r3, r1
 8000364:	60d3      	str	r3, [r2, #12]
		GPIOC->GPIO_OSPEEDR |= (copy_enPinMode.OSPEEDER << (local_enPin * 2));
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <GPIO_enPinConfig+0x16c>)
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	78ba      	ldrb	r2, [r7, #2]
 800036c:	4611      	mov	r1, r2
 800036e:	7bba      	ldrb	r2, [r7, #14]
 8000370:	0052      	lsls	r2, r2, #1
 8000372:	fa01 f202 	lsl.w	r2, r1, r2
 8000376:	4611      	mov	r1, r2
 8000378:	4a07      	ldr	r2, [pc, #28]	@ (8000398 <GPIO_enPinConfig+0x16c>)
 800037a:	430b      	orrs	r3, r1
 800037c:	6093      	str	r3, [r2, #8]
		break;
 800037e:	e000      	b.n	8000382 <GPIO_enPinConfig+0x156>
		break;
 8000380:	bf00      	nop
	}
	return local_enError;
 8000382:	7b7b      	ldrb	r3, [r7, #13]
}
 8000384:	4618      	mov	r0, r3
 8000386:	3714      	adds	r7, #20
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40020000 	.word	0x40020000
 8000394:	40020400 	.word	0x40020400
 8000398:	40020800 	.word	0x40020800

0800039c <GPIO_enPinSet>:

ERROR_t GPIO_enPinSet(GPIO_PINS_t copy_enPinNum, GPIO_PIN_OUT_t copy_enPinOut) {
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	460a      	mov	r2, r1
 80003a6:	71fb      	strb	r3, [r7, #7]
 80003a8:	4613      	mov	r3, r2
 80003aa:	71bb      	strb	r3, [r7, #6]
	GPIO_Port_t local_enPort = copy_enPinNum / 16;
 80003ac:	79fb      	ldrb	r3, [r7, #7]
 80003ae:	091b      	lsrs	r3, r3, #4
 80003b0:	73fb      	strb	r3, [r7, #15]
	GPIO_PINS_t local_enPin = copy_enPinNum % 16;
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 030f 	and.w	r3, r3, #15
 80003b8:	73bb      	strb	r3, [r7, #14]
	ERROR_t local_enError = OK;
 80003ba:	2301      	movs	r3, #1
 80003bc:	737b      	strb	r3, [r7, #13]
	if (copy_enPinOut == LOW) {
 80003be:	79bb      	ldrb	r3, [r7, #6]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d12d      	bne.n	8000420 <GPIO_enPinSet+0x84>
		switch (local_enPort) {
 80003c4:	7bfb      	ldrb	r3, [r7, #15]
 80003c6:	2b02      	cmp	r3, #2
 80003c8:	d01e      	beq.n	8000408 <GPIO_enPinSet+0x6c>
 80003ca:	2b02      	cmp	r3, #2
 80003cc:	dc56      	bgt.n	800047c <GPIO_enPinSet+0xe0>
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d002      	beq.n	80003d8 <GPIO_enPinSet+0x3c>
 80003d2:	2b01      	cmp	r3, #1
 80003d4:	d00c      	beq.n	80003f0 <GPIO_enPinSet+0x54>
		case PORTC:
			CLR_BIT(GPIOC->GPIO_ODR, local_enPin);
			break;

		default:
			break;
 80003d6:	e051      	b.n	800047c <GPIO_enPinSet+0xe0>
			CLR_BIT(GPIOA->GPIO_ODR, local_enPin);
 80003d8:	4b2d      	ldr	r3, [pc, #180]	@ (8000490 <GPIO_enPinSet+0xf4>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	7bba      	ldrb	r2, [r7, #14]
 80003de:	2101      	movs	r1, #1
 80003e0:	fa01 f202 	lsl.w	r2, r1, r2
 80003e4:	43d2      	mvns	r2, r2
 80003e6:	4611      	mov	r1, r2
 80003e8:	4a29      	ldr	r2, [pc, #164]	@ (8000490 <GPIO_enPinSet+0xf4>)
 80003ea:	400b      	ands	r3, r1
 80003ec:	6153      	str	r3, [r2, #20]
			break;
 80003ee:	e048      	b.n	8000482 <GPIO_enPinSet+0xe6>
			CLR_BIT(GPIOB->GPIO_ODR, local_enPin);
 80003f0:	4b28      	ldr	r3, [pc, #160]	@ (8000494 <GPIO_enPinSet+0xf8>)
 80003f2:	695b      	ldr	r3, [r3, #20]
 80003f4:	7bba      	ldrb	r2, [r7, #14]
 80003f6:	2101      	movs	r1, #1
 80003f8:	fa01 f202 	lsl.w	r2, r1, r2
 80003fc:	43d2      	mvns	r2, r2
 80003fe:	4611      	mov	r1, r2
 8000400:	4a24      	ldr	r2, [pc, #144]	@ (8000494 <GPIO_enPinSet+0xf8>)
 8000402:	400b      	ands	r3, r1
 8000404:	6153      	str	r3, [r2, #20]
			break;
 8000406:	e03c      	b.n	8000482 <GPIO_enPinSet+0xe6>
			CLR_BIT(GPIOC->GPIO_ODR, local_enPin);
 8000408:	4b23      	ldr	r3, [pc, #140]	@ (8000498 <GPIO_enPinSet+0xfc>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	7bba      	ldrb	r2, [r7, #14]
 800040e:	2101      	movs	r1, #1
 8000410:	fa01 f202 	lsl.w	r2, r1, r2
 8000414:	43d2      	mvns	r2, r2
 8000416:	4611      	mov	r1, r2
 8000418:	4a1f      	ldr	r2, [pc, #124]	@ (8000498 <GPIO_enPinSet+0xfc>)
 800041a:	400b      	ands	r3, r1
 800041c:	6153      	str	r3, [r2, #20]
			break;
 800041e:	e030      	b.n	8000482 <GPIO_enPinSet+0xe6>
		}
	} else if (copy_enPinOut == HIGH) {
 8000420:	79bb      	ldrb	r3, [r7, #6]
 8000422:	2b01      	cmp	r3, #1
 8000424:	d12d      	bne.n	8000482 <GPIO_enPinSet+0xe6>
		switch (local_enPort) {
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	2b02      	cmp	r3, #2
 800042a:	d01c      	beq.n	8000466 <GPIO_enPinSet+0xca>
 800042c:	2b02      	cmp	r3, #2
 800042e:	dc27      	bgt.n	8000480 <GPIO_enPinSet+0xe4>
 8000430:	2b00      	cmp	r3, #0
 8000432:	d002      	beq.n	800043a <GPIO_enPinSet+0x9e>
 8000434:	2b01      	cmp	r3, #1
 8000436:	d00b      	beq.n	8000450 <GPIO_enPinSet+0xb4>
		case PORTC:
			SET_BIT(GPIOC->GPIO_ODR, (local_enPin));
			break;

		default:
			break;
 8000438:	e022      	b.n	8000480 <GPIO_enPinSet+0xe4>
			SET_BIT(GPIOA->GPIO_ODR, (local_enPin));
 800043a:	4b15      	ldr	r3, [pc, #84]	@ (8000490 <GPIO_enPinSet+0xf4>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	7bba      	ldrb	r2, [r7, #14]
 8000440:	2101      	movs	r1, #1
 8000442:	fa01 f202 	lsl.w	r2, r1, r2
 8000446:	4611      	mov	r1, r2
 8000448:	4a11      	ldr	r2, [pc, #68]	@ (8000490 <GPIO_enPinSet+0xf4>)
 800044a:	430b      	orrs	r3, r1
 800044c:	6153      	str	r3, [r2, #20]
			break;
 800044e:	e018      	b.n	8000482 <GPIO_enPinSet+0xe6>
			SET_BIT(GPIOB->GPIO_ODR, (local_enPin));
 8000450:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <GPIO_enPinSet+0xf8>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	7bba      	ldrb	r2, [r7, #14]
 8000456:	2101      	movs	r1, #1
 8000458:	fa01 f202 	lsl.w	r2, r1, r2
 800045c:	4611      	mov	r1, r2
 800045e:	4a0d      	ldr	r2, [pc, #52]	@ (8000494 <GPIO_enPinSet+0xf8>)
 8000460:	430b      	orrs	r3, r1
 8000462:	6153      	str	r3, [r2, #20]
			break;
 8000464:	e00d      	b.n	8000482 <GPIO_enPinSet+0xe6>
			SET_BIT(GPIOC->GPIO_ODR, (local_enPin));
 8000466:	4b0c      	ldr	r3, [pc, #48]	@ (8000498 <GPIO_enPinSet+0xfc>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	7bba      	ldrb	r2, [r7, #14]
 800046c:	2101      	movs	r1, #1
 800046e:	fa01 f202 	lsl.w	r2, r1, r2
 8000472:	4611      	mov	r1, r2
 8000474:	4a08      	ldr	r2, [pc, #32]	@ (8000498 <GPIO_enPinSet+0xfc>)
 8000476:	430b      	orrs	r3, r1
 8000478:	6153      	str	r3, [r2, #20]
			break;
 800047a:	e002      	b.n	8000482 <GPIO_enPinSet+0xe6>
			break;
 800047c:	bf00      	nop
 800047e:	e000      	b.n	8000482 <GPIO_enPinSet+0xe6>
			break;
 8000480:	bf00      	nop
		}
	}
	return local_enError;
 8000482:	7b7b      	ldrb	r3, [r7, #13]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3714      	adds	r7, #20
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40020000 	.word	0x40020000
 8000494:	40020400 	.word	0x40020400
 8000498:	40020800 	.word	0x40020800

0800049c <GPIO_enPinRead>:
	}

	return local_enError;
}

ERROR_t GPIO_enPinRead(GPIO_PINS_t copy_enPinNum, GPIO_PIN_OUT_t *pPinInput) {
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	6039      	str	r1, [r7, #0]
 80004a6:	71fb      	strb	r3, [r7, #7]
	GPIO_Port_t local_enPort = copy_enPinNum / 16;
 80004a8:	79fb      	ldrb	r3, [r7, #7]
 80004aa:	091b      	lsrs	r3, r3, #4
 80004ac:	73fb      	strb	r3, [r7, #15]
	GPIO_PINS_t local_enPin = copy_enPinNum % 16;
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	f003 030f 	and.w	r3, r3, #15
 80004b4:	73bb      	strb	r3, [r7, #14]
	ERROR_t local_enError = OK;
 80004b6:	2301      	movs	r3, #1
 80004b8:	737b      	strb	r3, [r7, #13]

	switch (local_enPort) {
 80004ba:	7bfb      	ldrb	r3, [r7, #15]
 80004bc:	2b02      	cmp	r3, #2
 80004be:	d01e      	beq.n	80004fe <GPIO_enPinRead+0x62>
 80004c0:	2b02      	cmp	r3, #2
 80004c2:	dc28      	bgt.n	8000516 <GPIO_enPinRead+0x7a>
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d002      	beq.n	80004ce <GPIO_enPinRead+0x32>
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d00c      	beq.n	80004e6 <GPIO_enPinRead+0x4a>
	case PORTC:
		*pPinInput = READ_BIT(GPIOC->GPIO_IDR, local_enPin);
		break;

	default:
		break;
 80004cc:	e023      	b.n	8000516 <GPIO_enPinRead+0x7a>
		*pPinInput = READ_BIT(GPIOA->GPIO_IDR, local_enPin);
 80004ce:	4b16      	ldr	r3, [pc, #88]	@ (8000528 <GPIO_enPinRead+0x8c>)
 80004d0:	691a      	ldr	r2, [r3, #16]
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	fa22 f303 	lsr.w	r3, r2, r3
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	f003 0301 	and.w	r3, r3, #1
 80004de:	b2da      	uxtb	r2, r3
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	701a      	strb	r2, [r3, #0]
		break;
 80004e4:	e018      	b.n	8000518 <GPIO_enPinRead+0x7c>
		*pPinInput = READ_BIT(GPIOB->GPIO_IDR, local_enPin);
 80004e6:	4b11      	ldr	r3, [pc, #68]	@ (800052c <GPIO_enPinRead+0x90>)
 80004e8:	691a      	ldr	r2, [r3, #16]
 80004ea:	7bbb      	ldrb	r3, [r7, #14]
 80004ec:	fa22 f303 	lsr.w	r3, r2, r3
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	f003 0301 	and.w	r3, r3, #1
 80004f6:	b2da      	uxtb	r2, r3
 80004f8:	683b      	ldr	r3, [r7, #0]
 80004fa:	701a      	strb	r2, [r3, #0]
		break;
 80004fc:	e00c      	b.n	8000518 <GPIO_enPinRead+0x7c>
		*pPinInput = READ_BIT(GPIOC->GPIO_IDR, local_enPin);
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <GPIO_enPinRead+0x94>)
 8000500:	691a      	ldr	r2, [r3, #16]
 8000502:	7bbb      	ldrb	r3, [r7, #14]
 8000504:	fa22 f303 	lsr.w	r3, r2, r3
 8000508:	b2db      	uxtb	r3, r3
 800050a:	f003 0301 	and.w	r3, r3, #1
 800050e:	b2da      	uxtb	r2, r3
 8000510:	683b      	ldr	r3, [r7, #0]
 8000512:	701a      	strb	r2, [r3, #0]
		break;
 8000514:	e000      	b.n	8000518 <GPIO_enPinRead+0x7c>
		break;
 8000516:	bf00      	nop
	}
	return local_enError;
 8000518:	7b7b      	ldrb	r3, [r7, #13]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40020000 	.word	0x40020000
 800052c:	40020400 	.word	0x40020400
 8000530:	40020800 	.word	0x40020800

08000534 <RCC_voidSysClkEn>:
#include "STM32F4_MEM_MAP.h"
#include "RCC_Interface.h"
#include "RCC_Conf.h"

void RCC_voidSysClkEn(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
#if RCC_u8CLK_TYPE == RCC_u8HSE_CRYSTAL
	RCC->RCC_CR = 0x00000080;
 8000538:	4b03      	ldr	r3, [pc, #12]	@ (8000548 <RCC_voidSysClkEn+0x14>)
 800053a:	2280      	movs	r2, #128	@ 0x80
 800053c:	601a      	str	r2, [r3, #0]
#endif
	RCC->RCC_CR = 0x00010080;
#else
#error("You choosed wrong Clock Type")
#endif
}
 800053e:	bf00      	nop
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	40023800 	.word	0x40023800

0800054c <RCC_enPrephiralEnClk>:

ERROR_t RCC_enPrephiralEnClk(PeripheralBusId_t copy_enPeripheralBusId)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	80fb      	strh	r3, [r7, #6]
	busId_t local_enBusID = copy_enPeripheralBusId / 100;
 8000556:	88fb      	ldrh	r3, [r7, #6]
 8000558:	4a2d      	ldr	r2, [pc, #180]	@ (8000610 <RCC_enPrephiralEnClk+0xc4>)
 800055a:	fba2 2303 	umull	r2, r3, r2, r3
 800055e:	095b      	lsrs	r3, r3, #5
 8000560:	b29b      	uxth	r3, r3
 8000562:	73bb      	strb	r3, [r7, #14]
	PeripheralBusId_t local_enPeripheralID = copy_enPeripheralBusId % 100;
 8000564:	88fb      	ldrh	r3, [r7, #6]
 8000566:	4a2a      	ldr	r2, [pc, #168]	@ (8000610 <RCC_enPrephiralEnClk+0xc4>)
 8000568:	fba2 1203 	umull	r1, r2, r2, r3
 800056c:	0952      	lsrs	r2, r2, #5
 800056e:	2164      	movs	r1, #100	@ 0x64
 8000570:	fb01 f202 	mul.w	r2, r1, r2
 8000574:	1a9b      	subs	r3, r3, r2
 8000576:	81bb      	strh	r3, [r7, #12]
	ERROR_t local_enErrorState = OK;
 8000578:	2301      	movs	r3, #1
 800057a:	73fb      	strb	r3, [r7, #15]

	if (local_enPeripheralID <= 31)
 800057c:	89bb      	ldrh	r3, [r7, #12]
 800057e:	2b1f      	cmp	r3, #31
 8000580:	d83a      	bhi.n	80005f8 <RCC_enPrephiralEnClk+0xac>
	{
		switch (local_enBusID)
 8000582:	7bbb      	ldrb	r3, [r7, #14]
 8000584:	3b01      	subs	r3, #1
 8000586:	2b03      	cmp	r3, #3
 8000588:	d839      	bhi.n	80005fe <RCC_enPrephiralEnClk+0xb2>
 800058a:	a201      	add	r2, pc, #4	@ (adr r2, 8000590 <RCC_enPrephiralEnClk+0x44>)
 800058c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000590:	080005a1 	.word	0x080005a1
 8000594:	080005b7 	.word	0x080005b7
 8000598:	080005cd 	.word	0x080005cd
 800059c:	080005e3 	.word	0x080005e3
		{
		case BUS_AHB1:
			SET_BIT(RCC->RCC_AHB1ENR, local_enPeripheralID);
 80005a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000614 <RCC_enPrephiralEnClk+0xc8>)
 80005a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a4:	89ba      	ldrh	r2, [r7, #12]
 80005a6:	2101      	movs	r1, #1
 80005a8:	fa01 f202 	lsl.w	r2, r1, r2
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a19      	ldr	r2, [pc, #100]	@ (8000614 <RCC_enPrephiralEnClk+0xc8>)
 80005b0:	430b      	orrs	r3, r1
 80005b2:	6313      	str	r3, [r2, #48]	@ 0x30
			break;
 80005b4:	e024      	b.n	8000600 <RCC_enPrephiralEnClk+0xb4>

		case BUS_AHB2:
			SET_BIT(RCC->RCC_AHB2ENR, local_enPeripheralID);
 80005b6:	4b17      	ldr	r3, [pc, #92]	@ (8000614 <RCC_enPrephiralEnClk+0xc8>)
 80005b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ba:	89ba      	ldrh	r2, [r7, #12]
 80005bc:	2101      	movs	r1, #1
 80005be:	fa01 f202 	lsl.w	r2, r1, r2
 80005c2:	4611      	mov	r1, r2
 80005c4:	4a13      	ldr	r2, [pc, #76]	@ (8000614 <RCC_enPrephiralEnClk+0xc8>)
 80005c6:	430b      	orrs	r3, r1
 80005c8:	6353      	str	r3, [r2, #52]	@ 0x34
			break;
 80005ca:	e019      	b.n	8000600 <RCC_enPrephiralEnClk+0xb4>

		case BUS_APB1:
			SET_BIT(RCC->RCC_APB1ENR, local_enPeripheralID);
 80005cc:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <RCC_enPrephiralEnClk+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d0:	89ba      	ldrh	r2, [r7, #12]
 80005d2:	2101      	movs	r1, #1
 80005d4:	fa01 f202 	lsl.w	r2, r1, r2
 80005d8:	4611      	mov	r1, r2
 80005da:	4a0e      	ldr	r2, [pc, #56]	@ (8000614 <RCC_enPrephiralEnClk+0xc8>)
 80005dc:	430b      	orrs	r3, r1
 80005de:	6413      	str	r3, [r2, #64]	@ 0x40
			break;
 80005e0:	e00e      	b.n	8000600 <RCC_enPrephiralEnClk+0xb4>

		case BUS_APB2:
			SET_BIT(RCC->RCC_APB2ENR, local_enPeripheralID);
 80005e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000614 <RCC_enPrephiralEnClk+0xc8>)
 80005e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005e6:	89ba      	ldrh	r2, [r7, #12]
 80005e8:	2101      	movs	r1, #1
 80005ea:	fa01 f202 	lsl.w	r2, r1, r2
 80005ee:	4611      	mov	r1, r2
 80005f0:	4a08      	ldr	r2, [pc, #32]	@ (8000614 <RCC_enPrephiralEnClk+0xc8>)
 80005f2:	430b      	orrs	r3, r1
 80005f4:	6453      	str	r3, [r2, #68]	@ 0x44
			break;
 80005f6:	e003      	b.n	8000600 <RCC_enPrephiralEnClk+0xb4>
			break;
		}
	}
	else
	{
		local_enErrorState = NOK;
 80005f8:	2302      	movs	r3, #2
 80005fa:	73fb      	strb	r3, [r7, #15]
 80005fc:	e000      	b.n	8000600 <RCC_enPrephiralEnClk+0xb4>
			break;
 80005fe:	bf00      	nop
	}
	return local_enErrorState;
 8000600:	7bfb      	ldrb	r3, [r7, #15]
}
 8000602:	4618      	mov	r0, r3
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	51eb851f 	.word	0x51eb851f
 8000614:	40023800 	.word	0x40023800

08000618 <main>:
#include "RCC_Interface.h"
#include "GPIO_Interface.h"
#include "NVIC_Interface.h"

int main(void) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	RCC_voidSysClkEn();
 800061e:	f7ff ff89 	bl	8000534 <RCC_voidSysClkEn>
	RCC_enPrephiralEnClk(AHB1_GPIOAEN);
 8000622:	2064      	movs	r0, #100	@ 0x64
 8000624:	f7ff ff92 	bl	800054c <RCC_enPrephiralEnClk>
	GPIO_voidInit();
 8000628:	f7ff fdd4 	bl	80001d4 <GPIO_voidInit>

	GPIO_PIN_OUT_t PINA0_READ;

	while (1) {
		GPIO_enPinRead(PINA0, &PINA0_READ);
 800062c:	1dfb      	adds	r3, r7, #7
 800062e:	4619      	mov	r1, r3
 8000630:	2000      	movs	r0, #0
 8000632:	f7ff ff33 	bl	800049c <GPIO_enPinRead>
		if (PINA0_READ == LOW) {
 8000636:	79fb      	ldrb	r3, [r7, #7]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d104      	bne.n	8000646 <main+0x2e>
			GPIO_enPinSet(PINA5, HIGH);
 800063c:	2101      	movs	r1, #1
 800063e:	2005      	movs	r0, #5
 8000640:	f7ff feac 	bl	800039c <GPIO_enPinSet>
 8000644:	e7f2      	b.n	800062c <main+0x14>
		} else {
			GPIO_enPinSet(PINA5, LOW);
 8000646:	2100      	movs	r1, #0
 8000648:	2005      	movs	r0, #5
 800064a:	f7ff fea7 	bl	800039c <GPIO_enPinSet>
		GPIO_enPinRead(PINA0, &PINA0_READ);
 800064e:	e7ed      	b.n	800062c <main+0x14>

08000650 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000650:	480d      	ldr	r0, [pc, #52]	@ (8000688 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000652:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000654:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000658:	480c      	ldr	r0, [pc, #48]	@ (800068c <LoopForever+0x6>)
  ldr r1, =_edata
 800065a:	490d      	ldr	r1, [pc, #52]	@ (8000690 <LoopForever+0xa>)
  ldr r2, =_sidata
 800065c:	4a0d      	ldr	r2, [pc, #52]	@ (8000694 <LoopForever+0xe>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000660:	e002      	b.n	8000668 <LoopCopyDataInit>

08000662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000666:	3304      	adds	r3, #4

08000668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800066c:	d3f9      	bcc.n	8000662 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800066e:	4a0a      	ldr	r2, [pc, #40]	@ (8000698 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000670:	4c0a      	ldr	r4, [pc, #40]	@ (800069c <LoopForever+0x16>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000674:	e001      	b.n	800067a <LoopFillZerobss>

08000676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000678:	3204      	adds	r2, #4

0800067a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800067c:	d3fb      	bcc.n	8000676 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800067e:	f000 f811 	bl	80006a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000682:	f7ff ffc9 	bl	8000618 <main>

08000686 <LoopForever>:

LoopForever:
  b LoopForever
 8000686:	e7fe      	b.n	8000686 <LoopForever>
  ldr   r0, =_estack
 8000688:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000694:	080007cc 	.word	0x080007cc
  ldr r2, =_sbss
 8000698:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800069c:	2000001c 	.word	0x2000001c

080006a0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC_IRQHandler>
	...

080006a4 <__libc_init_array>:
 80006a4:	b570      	push	{r4, r5, r6, lr}
 80006a6:	4d0d      	ldr	r5, [pc, #52]	@ (80006dc <__libc_init_array+0x38>)
 80006a8:	4c0d      	ldr	r4, [pc, #52]	@ (80006e0 <__libc_init_array+0x3c>)
 80006aa:	1b64      	subs	r4, r4, r5
 80006ac:	10a4      	asrs	r4, r4, #2
 80006ae:	2600      	movs	r6, #0
 80006b0:	42a6      	cmp	r6, r4
 80006b2:	d109      	bne.n	80006c8 <__libc_init_array+0x24>
 80006b4:	4d0b      	ldr	r5, [pc, #44]	@ (80006e4 <__libc_init_array+0x40>)
 80006b6:	4c0c      	ldr	r4, [pc, #48]	@ (80006e8 <__libc_init_array+0x44>)
 80006b8:	f000 f818 	bl	80006ec <_init>
 80006bc:	1b64      	subs	r4, r4, r5
 80006be:	10a4      	asrs	r4, r4, #2
 80006c0:	2600      	movs	r6, #0
 80006c2:	42a6      	cmp	r6, r4
 80006c4:	d105      	bne.n	80006d2 <__libc_init_array+0x2e>
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80006cc:	4798      	blx	r3
 80006ce:	3601      	adds	r6, #1
 80006d0:	e7ee      	b.n	80006b0 <__libc_init_array+0xc>
 80006d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80006d6:	4798      	blx	r3
 80006d8:	3601      	adds	r6, #1
 80006da:	e7f2      	b.n	80006c2 <__libc_init_array+0x1e>
 80006dc:	080007c4 	.word	0x080007c4
 80006e0:	080007c4 	.word	0x080007c4
 80006e4:	080007c4 	.word	0x080007c4
 80006e8:	080007c8 	.word	0x080007c8

080006ec <_init>:
 80006ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ee:	bf00      	nop
 80006f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f2:	bc08      	pop	{r3}
 80006f4:	469e      	mov	lr, r3
 80006f6:	4770      	bx	lr

080006f8 <_fini>:
 80006f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006fa:	bf00      	nop
 80006fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006fe:	bc08      	pop	{r3}
 8000700:	469e      	mov	lr, r3
 8000702:	4770      	bx	lr
